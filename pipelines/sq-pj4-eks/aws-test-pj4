pipeline {
    agent { label 'J_Agent' }
    environment {
        JOB_NAME_TO_TRIGGER = ""
        GITHUB_REPO = "git@github.com:Inframous/sq-pj1-app.git"
        GITHUB_CREDS = 'ssh-GitHub'
        LOG_BUCKET = 'sq-pj4-bucket'
        AWS_REGION = "us-west-1"
    }
    stages {
        stage('Checkout SCM') {
            steps {
                gitCheckout()
            }
        }
        stage('Building Test Image') {
            steps {
                sh '''
                    sudo docker build -f ./Dockerfile -t "sq-pj1-app:latest" .
                '''
            }
        }
        stage('Starting Test-Container') {
            steps {
                sh '''
                    sudo docker run -d -p 80:80 --rm --name sq-pj1-app sq-pj1-app
                '''
            }
        }
        stage('Testing') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '''
                        sudo docker exec -i sq-pj1-app pytest --html=report.html --self-contained-html
                        sudo docker cp sq-pj1-app:/app/report.html .
                    '''
                    script {
                        if (currentBuild.result == 'FAILURE') {
                            echo 'Testing stage failed!'
                            env.TEST_RESULT = 'FAILURE'
                        }
                        else {
                            echo "Testing stage PASSED!"
                            env.TEST_RESULT = 'SUCCESS'
                        }
                    }
                }
            }
        }
        stage("Spinning down container") {
            steps {
                sh '''
                    sudo docker stop sq-pj1-app
                '''
            }
        }
        stage("Cleaning up Test Image ...") {
            steps {
                sh '''
                    sudo docker image rm sq-pj1-app
                '''
            }
        }
        stage('Building Official Image and Pushing to Docker-Hub') {
            when {
                expression {
                    env.TEST_RESULT == 'SUCCESS' 
                }
            }
            steps {
                script {
                    def report_file = sh(script: "wget https://${LOG_BUCKET}.s3.${AWS_REGION}.amazonaws.com/report.csv", returnStatus: true)

                    // If this is the first run, the CSV file won't be there, so we'll create it.
                    if (report_file != 0) {
                        env.APP_VERSION = "1.0"
                    } else {
                        def version_output = sh(script: '''
                            line_count=$(wc -l report.csv | awk '{print $1}')
                            SUB_VERSION=$(( line_count - 1 ))
                            echo "1.${SUB_VERSION}"
                            ''', returnStdout: true).trim()
                        env.APP_VERSION = version_output
                    }
                }
                withCredentials([usernamePassword(credentialsId: 'docker-Creds', passwordVariable: 'DOCKER_REGISTRY_PWD', usernameVariable: 'DOCKER_REGISTRY_USER')]) {
                    sh '''
                        sudo docker build -f ./Dockerfile -t "sq-pj1-app:${APP_VERSION}" .
                        sudo docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PWD}
                        
                        sudo docker tag "sq-pj1-app:${APP_VERSION}" "inframous/sq-pj1-app:${APP_VERSION}"
                        sudo docker push "inframous/sq-pj1-app:${APP_VERSION}"
                        
                        sudo docker tag "sq-pj1-app:${APP_VERSION}" "inframous/sq-pj1-app:latest"
                        sudo docker push "inframous/sq-pj1-app:latest"
                    '''
                }
            }

        }
    }
    post {
        always {
            script {
            if (currentBuild.result == 'FAILURE') {
                env.TEST_RESULT = 'FAILURE'
            }
            else {
                env.TEST_RESULT = 'SUCCESS'
            }
                // Setting up a variable with the current date and time.
            def now = new Date().format("dd-MM-yy--HH:mm:ss", TimeZone.getTimeZone('UTC'))
                env.NOW = now
                
                // Renaming report.html
            sh '''
                mv report.html ${NOW}-report.html
            '''
                // Trying to download report.csv from the bucket
            def report_file = sh(script: "wget https://${LOG_BUCKET}.s3.${AWS_REGION}.amazonaws.com/report.csv", returnStatus: true)
                // If this is the first run, the CSV file won't be there, so we'll create it.
            if (report_file != 0) {
            wrap([$class: 'BuildUser']) {
            sh 'echo "user_name,date,test_result" > report.csv'
                }
            }
                // Adding the current build's info to the file (Using the 'build user vars plugin')
            wrap([$class: 'BuildUser']) {
            sh 'echo "$BUILD_USER","$NOW","$TEST_RESULT" >> report.csv'
                }
            }
                // Uploading the report.csv to the bucket  
            withAWS(region: "${AWS_REGION}", credentials: "aws-Master-Controller") {
                s3Upload(file:"report.csv", bucket:"${LOG_BUCKET}", path:"")
                s3Upload(file:"${NOW}-report.html", bucket:"${LOG_BUCKET}", path:"html-reports/")
                script {
                    logTestToDynamoDB()
                }
                sh '''
                    aws s3api put-object-acl --region us-west-1 --bucket sq-pj4-bucket --key report.csv --acl public-read
                    
                '''
            }
            script {
                echo "Cleaning up... "
                sh 'sudo rm -rf **'
            }
        }
        success {
            
            script {
                build job: "EKS-Deploy", wait: false
            }
        }
        failure {
            script {
                echo "The test failed."
                echo "Cleaning up... "
                // sh 'sudo rm -rf **'
            }
        }
    }
}

def fileExists(String filePath) {
    return fileExists(new File(filePath))
}

def fileExists(File file) {
    return file.exists()
}

def gitCheckout() {
    checkout([
        $class: 'GitSCM',
        branches: [[name: '*/main']],
        userRemoteConfigs: [[
            url: "${GITHUB_REPO}",
            credentialsId: "${GITHUB_CREDS}"
        ]]
    ])
}

def logTestToDynamoDB() {
    sh '''
        # wget https://${LOG_BUCKET}.s3.amazonaws.com/report.csv
        # wget https://sq-proj2.s3.amazonaws.com/update_dynamodb.py
        aws s3 cp s3://sq-proj2/update_dynamodb.py .
        input=$(tail -n 1 report.csv) 
        line_count=$(wc -l report.csv | awk '{print $1}')
        TestId=$((line_count - 1))
        TestUser="$(echo $input | cut -d ',' -f1 | sed 's/ /-/g')"
        TestDate="$(echo $input | cut -d ',' -f2 )"
        TestResult="$(echo $input | cut -d ',' -f3 )"
        pip install boto3
        python3 update_dynamodb.py sq-pj4-dynamodb $TestId $TestUser $TestDate $TestResult
    ''' 
}

